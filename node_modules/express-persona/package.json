{
  "name": "express-persona",
  "version": "0.1.1",
  "description": "Mozilla Persona authentication for your Express application",
  "keywords": [
    "mozilla",
    "persona",
    "browserid",
    "authentication",
    "express"
  ],
  "author": {
    "name": "Jon Buckley",
    "email": "jon@jbuckley.ca"
  },
  "license": "BSD",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/jbuck/express-persona.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/tap --timeout 120 test/*.test.js"
  },
  "dependencies": {
    "browserid-verify": "~0.1.2",
    "connect": "~2.9.0"
  },
  "devDependencies": {
    "async": "~0.2.9",
    "express": "~3.4.0",
    "request": "~2.27.0",
    "tap": "~0.4.4"
  },
  "readme": "express-persona [![Build Status](https://secure.travis-ci.org/jbuck/express-persona.png)](http://travis-ci.org/jbuck/express-persona)\n===============\n\nMozilla Persona integration for Express. express-persona is designed to quickly get\nPersona authentication working in your Express application, while following Persona\nsecurity best practices.\n\nQuick start\n-----------\nInstall using npm: `npm install express-persona`\n\nInclude the module inside your Express application:\n\n```javascript\nvar express = require(\"express\"),\n    app = express();\n\napp.use(express.json())\n  .use(express.urlencoded())\n  .use(express.cookieParser())\n  .use(express.session({\n  \tsecret: \"mozillapersona\"\n  }));\n\nrequire(\"express-persona\")(app, {\n  audience: \"http://localhost:8888\" // Must match your browser's address bar\n});\n```\n\nInclude the Persona library in your web page:\n\n`<script src=\"https://login.persona.org/include.js\"></script>`\n\nAdd login and logout functionality to your buttons:\n\n```javascript\ndocument.querySelector(\"#login\").addEventListener(\"click\", function() {\n  navigator.id.request();\n}, false);\n\ndocument.querySelector(\"#logout\").addEventListener(\"click\", function() {\n  navigator.id.logout();\n}, false);\n```\n\nWatch for login and logout actions:\n\n```javascript\nnavigator.id.watch({\n  onlogin: function(assertion) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/persona/verify\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.addEventListener(\"loadend\", function(e) {\n      var data = JSON.parse(this.responseText);\n      if (data && data.status === \"okay\") {\n        console.log(\"You have been logged in as: \" + data.email);\n      }\n    }, false);\n\n    xhr.send(JSON.stringify({\n      assertion: assertion\n    }));\n  },\n  onlogout: function() {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/persona/logout\", true);\n    xhr.addEventListener(\"loadend\", function(e) {\n      console.log(\"You have been logged out\");\n    });\n    xhr.send();\n  }\n});\n```\n\nBy default, express-persona adds the users email address to `req.session.email` when their\nemail is validated.\n\nThis library will handle 3 of 4 essential practices for [Persona security considerations]\n(https://developer.mozilla.org/en-US/docs/Persona/Security_Considerations) but you should\nimplement CSRF protection as well. I recommend the built-in express csrf middleware.\n\nYou can view and run complete examples in the\n[examples directory](https://github.com/jbuck/express-persona/tree/master/examples)\n\nDocumentation\n-------------\n\n### API\n\n* `require('express-persona')` returns `function(express, options)`\n  * `express` is an instance of the express server that you want to add routes to\n  * `options` is an object. It has one required parameter, `audience`.\n\n### Required options\n\n* `audience` - The URL of your express app when viewed in a browser. Must include the protocol, hostname, and port.\n  * Example: `http://example.org:80`, `https://example.org:443`\n\n### Optional options\n\n* `verifyPath` - The URL that clients use to verify credentials.\n  * Default: `/persona/verify`\n  * Examples: `/browserid/verify`, `/api/verify`\n* `logoutPath` - The URL that clients use to logout.\n  * Default: `/persona/logout`\n  * Examples: `/browserid/logout`, `/api/logout`\n* `sessionKey` - The session key to store the validated email in.\n  * Default: `email`\n  * Example: `user`, `username`\n* `verifierURI` - The URI of the Persona Remote Verification API\n  * Default: `https://verifier.login.persona.org/verify`\n  * You probably don't want to touch this unless you have a good reason, like testing.\n* `verifyResponse(error, req, res, email)` - Function to generate response for verify route\n  * Default: see _Verify route_, below, for successess and failure responses\n  * `error` will be a string suitable for display (the \"reason\" attribute in the default implementation), if an error occurs\n  * `req, res` are the request and response objects\n  * `email` is a string containing the email, and will exist if there is not an error\n* `logoutResponse(error, req, res)` - Function to generate response for logout route\n  * Default: see _Logout route_, below, for response\n  * `error` will be a string suitable for display, if an error occurs\n  * `req, res` are the request and response objects\n* `middleware(req, res, next)` - Custom middleware for logout/login routes\n  * Default: none\n  * `req, res` are the request and response objects\n  * `next` points to the next middleware function in the chain\n\n### Verify route\n\n* On success:\n\n```javascript\n{\n  \"status\": \"okay\"\n  \"email\": \"jon@example.org\"\n}\n```\n\n* On failure\n\n```javascript\n{\n  \"status\": \"failure\"\n  \"reason\": \"request failed\"\n}\n```\n\n### Logout route\n\n* Always returns:\n\n```javascript\n{\n  \"status\": \"okay\"\n}\n```\n\nTests\n-----\n\n### Running Tests\n\nRun tests using `npm test` from the root of the repository.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jbuck/express-persona/issues"
  },
  "homepage": "https://github.com/jbuck/express-persona",
  "_id": "express-persona@0.1.1",
  "_from": "express-persona@~0.1.1"
}
