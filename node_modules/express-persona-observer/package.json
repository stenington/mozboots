{
  "name": "express-persona-observer",
  "version": "0.0.1",
  "author": {
    "name": "Mike Larsson",
    "email": "mikelarssonftw@gmail.com"
  },
  "description": "Opinionated Mozilla Persona Observer API authentication for your Express application",
  "main": "index.js",
  "dependencies": {
    "minstache": "~1.1.0",
    "express-persona": "~0.1.1"
  },
  "devDependencies": {
    "express": "~3.4.7",
    "nunjucks": "~1.0.1",
    "should": "~2.1.1",
    "mocha": "~1.16.1",
    "request": "~2.30.0",
    "istanbul": "~0.2.3",
    "underscore": "~1.5.2"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha -R spec test/*.test.js"
  },
  "readme": "express-persona-observer\n========================\n\nOpinionated Mozilla Persona integration for Express. express-persona-observer adds functionality\nto [express-persona][] to make integration of Persona using its Observer API even more seamless.\n\n[express-persona]: https://github.com/jbuck/express-persona.git\n\n## Quick start\nInstall using npm: `npm install express-persona-observer`\n\nInclude the module inside your Express application:\n\n```javascript\nvar express = require(\"express\");\nvar persona = require(\"express-persona-observer\");\nvar app = express();\n\napp.use(express.json());\napp.use(express.urlencoded());\napp.use(express.cookieParser());\napp.use(express.session({\n  secret: \"mozillapersonaiswatchingyou\"\n}));\n\npersona.express(app, {\n  audience: \"http://localhost:8888\" // Must match your browser's address bar\n});\n```\n\nInclude the Persona library and login script in your web pages:\n\n```html\n<script src=\"https://login.persona.org/include.js\"></script>\n<script src=\"/persona/login.js\"></script>\n```\n\nor\n\n```html\n<script src=\"https://login.persona.org/include.js\"></script>\n<script src=\"{{loginScriptUrl}}\"></script>\n```\n\nif you're using a templating engine.\n\nAdd login and logout buttons to your page:\n\n```html\n<button id=\"login\">Log In</button>\n<button id=\"logout\">Log Out</button>\n```\n\nLike [express-persona], by default the user's email address is added to `req.session.email`\nwhen their email is validated.\n\nYou can view and run a complete example in the [examples directory](#).\n\n## Documentation\n\n`express-persona-observer` provides both the server and client-side code to integrate Persona\ninto your express application, with sensible defaults so it works right out of the box. Additionally, \nit provides several useful route middleware methods, request methods, and application locals to take the \npain out of writing Persona-based applications.\n\n### Route middleware\n\n* `ensureLoggedIn([path])` - errors or redirects if a user is not logged in \n  * `path` is an optional string specifying a redirect path; if omitted `next()` will be called with an error\n    unless a default redirect path has been specified as an option to `express()`\n* `ensureLoggedOut([path])` - errors or redirects if a user is logged in\n  * `path` is an optional string specifying a redirect path; if omitted `next()` will be called with an error\n    unless a default redirect path has been specified as an option to `express()`\n\n### Request helpers\n\n* `fromLoggedInUser` - returns true if the request session includes a user\n\n### Templating locals\n\n* `loggedInUser` - logged in user email, or null\n* `loginScriptUrl` - path to `login.js`\n\n### Configuration\n\n* `express(app, options)`\n  * `app` is an instance of the express server that you want to add routes to.\n  * `options` is an object. It has one required parameter, `audience`.\n\n### Required options\n\n* `audience` = The URL of your express app when viewed in a browser. Must include the protocol, hostname, and port.\n  * Example: `http://example.org:80`, `https://example.org:443`\n\n### Optional options\n\n* `express-persona-observer` supports all [`express-persona` options](https://github.com/jbuck/express-persona/tree/v0.1.0#optional-options).\n* `syncResponse(req, res, next)` - Response handler when your app needs to synchronize its session with Persona\n  * Default: none\n  * `req, res, next` are the typical express middleware callback arguments\n  * The provided handler should return a page that loads `login.js`, which handles synchronization with Persona. The path will then\n    be reloaded.\n* `loginjsPath` - Path at which `login.js` will be hosted.\n  * Default: '/persona/login.js'\n* `redirects` - object containing default redirects for route middleware methods\n  * `notLoggedIn` - string specifying default redirect path for `ensureLoggedIn`\n  * `notLoggedOut` - string specifying default redirect path for `ensureLoggedOut`\n* `exemptPaths` - an array of strings specifying paths that are exempt from synchronization\n* `selectors` - object containing login and logout button selectors\n  * login - string specifying login button selector, defaults to `#login`\n  * logout - string specifying logout button selector, defaults to `#logout`\n\n## Tests\n\nTests can be run with `npm test`. Test coverage can be generated with `node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -R spec test/*.test.js`.\n",
  "readmeFilename": "README.md",
  "_id": "express-persona-observer@0.0.1",
  "_from": "express-persona-observer@"
}
